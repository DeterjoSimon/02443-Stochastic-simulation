# Excercise 3
# Continuous sample space
#
# • Generate simulated values from the following distributions:
#   • Exponential distribution
#   • Normal distribution
#   • Pareto distribution, with β = 1 and experiment with different 
#     values of k values: k = 2.05, k = 2.5, k = 3 og k = 4.
#
# • Verify the results by comparing histograms with analytical results.
# • For the Pareto distribution compare mean value and variance,
#   with analytical results, which can be calculated as:
#
#   E{X} = β(k/(k-1)) for k > 1
#   E{X} = β²(k/(k-1)²(k-2)²) for k > 2
#
# • For the normal distribution generate 100 95% confidence intervals 
#   for the mean and variance based on 10 observations. Discuss the results.

# Resets Julia MersenneTwister random number generator
srand(0) 

using Distributions
using StatsBase
using UnicodePlots

# • Generate simulated values
exponential(;α=1.0, uᵢ=rand()) = -log(uᵢ)/α

# Exponential distribution:
# julia> histogram([exponential() for _ = 1:5000])
#            ┌────────────────────────────────────────┐
#  (0.0,1.0] │▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 3160 │
#  (1.0,2.0] │▇▇▇▇▇▇▇▇▇▇▇▇▇ 1169                      │
#  (2.0,3.0] │▇▇▇▇ 410                                │
#  (3.0,4.0] │▇▇ 167                                  │
#  (4.0,5.0] │▇ 56                                    │
#  (5.0,6.0] │ 26                                     │
#  (6.0,7.0] │ 7                                      │
#  (7.0,8.0] │ 3                                      │
#  (8.0,9.0] │ 1                                      │
# (9.0,10.0] │ 1                                      │
#            └────────────────────────────────────────┘
#
# Normal distribution (using Box-Muller):

bm(;u₁=rand(), u₂=rand()) = √(-2*log(u₁))*cos(2π*u₂)

# julia> histogram([bm() for _ = 1:5000])
#             ┌────────────────────────────────────────┐
# (-4.0,-3.5] │ 1                                      │
# (-3.5,-3.0] │ 6                                      │
# (-3.0,-2.5] │▇ 20                                    │
# (-2.5,-2.0] │▇▇▇▇ 107                                │
# (-2.0,-1.5] │▇▇▇▇▇▇▇▇ 224                            │
# (-1.5,-1.0] │▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 446                    │
# (-1.0,-0.5] │▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 774       │
#  (-0.5,0.0] │▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 939 │
#   (0.0,0.5] │▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 948 │
#   (0.5,1.0] │▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 768        │
#   (1.0,1.5] │▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 446                    │
#   (1.5,2.0] │▇▇▇▇▇▇▇ 201                             │
#   (2.0,2.5] │▇▇▇ 90                                  │
#   (2.5,3.0] │▇ 26                                    │
#   (3.0,3.5] │ 4                                      │
#             └────────────────────────────────────────┘
# Pareto distribution:
# def pareto(beta, k, n, plot=False):
#     x = np.array([beta*(math.pow(random.random(), (-1/k))) for i in range(n)])
#     x = x[np.where(x>beta)]

pareto(k = 1.0, β = 1.0; uᵢ = rand()) = β * uᵢ^(-1/k)
# julia> histogram([pareto(4, 1) for _ = 1:5000], bins=20)
#           ┌────────────────────────────────────────┐
# (1.0,1.2] │▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 233 │
# (1.2,1.4] │▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 109                    │
# (1.4,1.6] │▇▇▇▇▇▇▇▇▇ 62                            │
# (1.6,1.8] │▇▇▇▇ 26                                 │
# (1.8,2.0] │▇▇▇▇ 28                                 │
# (2.0,2.2] │▇▇ 11                                   │
# (2.2,2.4] │▇ 8                                     │
# (2.4,2.6] │▇ 4                                     │
# (2.6,2.8] │▇ 5                                     │
# (2.8,3.0] │▇ 4                                     │
# (3.0,3.2] │▇ 4                                     │
# (3.2,3.4] │ 0                                      │
# (3.4,3.6] │ 1                                      │
# (3.6,3.8] │ 2                                      │
# (3.8,4.0] │ 1                                      │
# (4.0,4.2] │ 2                                      │
#           └────────────────────────────────────────┘
#
# Analytical results:
#  
# Exponential distribution:
#
# julia> x = linspace(0, 10, 100); lineplot(x, pdf(Exponential(),x))
#      ┌──────────────────────────────────────────────────┐
#    1 │⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⠈⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⠀⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⠀⠸⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⠀⠀⠀⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⠀⠀⠀⠘⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⠀⠀⠀⠀⠱⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⠀⠀⠀⠀⠀⠸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⠀⠀⠀⠀⠀⠀⠑⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⠀⠀⠀⠀⠀⠀⠀⠀⠑⠤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#    0 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠒⠢⠤⠤⢄⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀│
#      └──────────────────────────────────────────────────┘
#      0                                                 10
#
# Normal distribution
#
# julia> x = linspace(-4, 4, 100); lineplot(x, pdf(Normal(),x))
#        ┌──────────────────────────────────────────────────┐
#    0.4 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡴⠉⡏⢆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#        │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠁⠀⡇⠀⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#        │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠃⠀⠀⡇⠀⠘⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#        │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡎⠀⠀⠀⡇⠀⠀⢱⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#        │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⠁⠀⠀⠀⡇⠀⠀⠈⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#        │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⡇⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#        │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡸⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#        │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠇⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠘⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#        │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡜⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#        │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⠁⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠘⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#        │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠏⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠱⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#        │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡜⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#        │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡼⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#        │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠑⢄⠀⠀⠀⠀⠀⠀⠀⠀│
#      0 │⣀⣀⣀⣀⣀⣀⠤⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠒⠤⣀⣀⣀⣀⣀⣀│
#        └──────────────────────────────────────────────────┘
#        -4                                                 4
#
# Pareto distribution
# julia> x = linspace(0, 4, 100); lineplot(x, pdf(Pareto(4, 1),x))
#      ┌──────────────────────────────────────────────────┐
#    4 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⢻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠸⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠈⢦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠑⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
#    0 │⣀⣀⣀⣀⣀⣀⣀⣀⣀⣸⠀⠀⠀⠀⠀⠀⠀⠉⠑⠢⠤⠤⠤⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀│
#      └──────────────────────────────────────────────────┘
#      0           1                                      4
#
# As expected, our results align very fine - histograms match
# the analytical results.
#
# • For the Pareto distribution compare mean value and variance,
#   with analytical results, which can be calculated as:
#
#   E{X}   = β(k/(k-1)) for k > 1
#   Var{X} = β²(k/(k-1)²(k-2)) for k > 2
#
# julia> k = 4; β = 1
# julia> pareto_samples = [pareto(k, β) for _ = 1:5000]
# julia> mean(pareto_samples), var(pareto_samples)
# (1.326931889390475, 0.20347144127317826)
#
# julia> (β*(k/(k-1)), (β^2) * (k / ((k-1)^2 * (k-2))))
# (1.3333333333333333, 0.2222222222222222)
#
# Mean and variance align nicely too.
#
# • For the normal distribution generate 100 95% confidence intervals 
#   for the mean and variance based on 10 observations. Discuss the results.

# We start with generating 100 samples based on 10 observations each.
#
# julia> rands = randn(100, 10);
# julia> means = mean(rands, 2);
# julia> vars = var(rands, 2);
#
# Next, we figure out critical regions for T distribution, 
# df = 10 - 1 = 9 and α = 0.05
#
# julia> α = 0.05; df = 9; critical = quantile(TDist(df), [α/2, 1-α/2])
# 2-element Array{Float64,1}:
#  -2.26216
#   2.26216
#
# Finally, we compute the confidence intervals for mean:
#
# julia> [(means[i] + critical[1]*(√vars[i]/√10), means[i] + critical[2]*(√vars[i]/√10)) for i = 1:100]
# 100-element Array{Tuple{Float64,Float64},1}:
#  (-0.75884,0.620299)
#  (-0.686635,0.724314)
#  (-1.26376,0.528416)
#  (-0.566544,0.935217)
#  (-0.866801,0.393681)
#  (-1.22117,0.422684)
#  (-0.26112,1.71946)
#  (0.233004,1.66792)
#  (-0.705352,0.527358)
#  (-1.09877,0.488289)
#  (-0.51782,0.802753)
#  ⋮
#  (-1.01121,0.572478)
#  (-0.502241,0.351147)
#  (-0.0887249,0.967949)
#  (-1.32926,0.45728)
#  (-0.737747,0.953845)
#  (-0.483196,1.00512)
#  (-0.313698,0.848781)
#  (-0.116602,0.865324)
#  (-0.540636,0.666241)
#  (-0.634199,1.00059)
#  (-1.13196,0.562659)
#  (-1.0686,0.19298)
#
#### Note: Formula from http://onlinestatbook.com/2/estimation/mean.html
#
# And variance:
# julia> [(vars[i] + critical[1]*(√vars[i]/√10), vars[i] - critical[1]*(√vars[i]/√10)) for i = 1:100]
# 100-element Array{Tuple{Float64,Float64},1}:
#  (0.239633,1.61877)
#  (0.267087,1.67804)
#  (0.673033,2.46521)
#  (0.350902,1.85266)
#  (0.145949,1.40643)
#  (0.498213,2.14206)
#  (0.926084,2.90667)
#  (0.288427,1.72335)
#  ⋮
#  (0.396676,1.94468)
#  (0.666,2.45254)
#  (0.552135,2.24373)
#  (0.337983,1.8263)
#  (0.0789444,1.24142)
#  (-0.0199291,0.961997)
#  (0.108136,1.31501)
#  (0.488233,2.12303)
#  (0.55563,2.25025)
#  (0.146754,1.40834)
#
#
